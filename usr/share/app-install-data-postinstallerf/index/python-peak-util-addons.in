#!/bin/sh
Name='<b>python-peak-util-addons</b>'
Comment='<span size="xx-large">Dynamically extend other objects with AddOns</span>'
Comment3='
In any sufficiently-sized application or framework, its common to end up
lumping a lot of different concerns into the same class.  For example, you may
have business logic, persistence code, and UI all jammed into a single class.
Attribute and method names for all sorts of different operations get shoved

Separating concerns into different objects, however, makes it easier to write
reusable and separately-testable components.  The AddOns package
(``peak.util.addons``) lets you manage concerns using ``AddOn`` classes.
'
License='Python or ZPLv2.1'
Screenshot=''
Url='http://pypi.python.org/pypi/AddOns'
export Comment
export Name
export Comment3
export License
export Screenshot
export Url
